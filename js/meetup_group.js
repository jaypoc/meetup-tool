// Generated by CoffeeScript 1.6.3
(function() {
  var Meetup, MeetupGroup, Sugar;

  Sugar = require('sugar');

  Meetup = require('meetup');

  MeetupGroup = (function() {
    function MeetupGroup(args) {
      if (args == null) {
        args = {};
      }
      this.group_id = args.group_id || null;
      this.key = args.key || null;
      this.expire_after = args.expire_after || null;
      this.conn = new Meetup;
      this.members = [];
    }

    MeetupGroup.prototype.get_profiles = function(callback) {
      var params,
        _this = this;
      this.members = [];
      params = {
        key: this.key,
        group_id: this.group_id,
        fields: "membership_dues"
      };
      return this.conn.get("/2/profiles", params, function(err, data) {
        var parsed;
        parsed = JSON.parse(data);
        parsed.results.each(function(profile) {
          return _this.members.push(_this.updated_profile(profile));
        });
        return callback();
      });
    };

    MeetupGroup.prototype.updated_profile = function(profile) {
      var days, joined, name, status, today;
      today = (new Date).getTime();
      name = profile.name;
      joined = profile.created;
      status = profile.membership_dues.period_status;
      days = ((today - joined) / 86400000).round(0);
      if (days > this.expire_after - 1 && status === "unpaid" && name !== "Mike R") {
        profile.status = "expired";
      }
      if (status === "paid" || name === "Mike R") {
        profile.status = "current";
      }
      if (days < this.expire_after && status === "unpaid") {
        profile.status = "trial";
      }
      profile.joined = (new Date(joined)).format("{MM}/{dd}/{yyyy}");
      profile.days = days;
      return profile;
    };

    MeetupGroup.prototype.show_member = function(member, conditional) {
      if (conditional == null) {
        conditional = null;
      }
      if (member.status === conditional) {
        return console.log("  " + member.name + " (Joined " + member.days + " days ago on " + member.joined + ")");
      }
    };

    MeetupGroup.prototype.show = function() {
      var _this = this;
      return this.get_profiles(function() {
        var status;
        status = process.argv[2] || null;
        console.log("Selected " + status);
        if (!status) {
          return console.log("Please specify a status. ie:\n  node meetup.js [all|trial|current|expired]");
        } else {
          if (status === "all") {
            console.log("CURRENT");
            _this.members.each(function(member) {
              return _this.show_member(member, "current");
            });
            console.log("TRIAL");
            _this.members.each(function(member) {
              return _this.show_member(member, "trial");
            });
            console.log("EXPIRED");
            return _this.members.each(function(member) {
              return _this.show_member(member, "expired");
            });
          } else {
            return _this.members.each(function(member) {
              return _this.show_member(member, status);
            });
          }
        }
      });
    };

    return MeetupGroup;

  })();

  module.exports = function(args) {
    if (args == null) {
      args = {};
    }
    return new MeetupGroup(args);
  };

}).call(this);
